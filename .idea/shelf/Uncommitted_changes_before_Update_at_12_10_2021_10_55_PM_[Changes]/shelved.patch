Index: src/Chairman/Chairman.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Chairman;\r\nimport com.google.gson.*;\r\n\r\nimport java.io.IOException;\r\nimport java.nio.file.Files;\r\nimport java.nio.file.Path;\r\nimport java.nio.file.StandardOpenOption;\r\n\r\npublic class Chairman {\r\n    private String username;\r\n    private String password;\r\n    //private final Gson gson = new GsonBuilder().setPrettyPrinting().create();\r\n    private final DataHandler dh = DataHandler.getInstance();\r\n\r\n    public void createNewMember(Member member){\r\n        String text = \"\";\r\n        int id;\r\n\r\n        try {\r\n            text = Files.readString(Path.of(\"members/idCounter.txt\"));\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n        id = Integer.parseInt(text);\r\n        member.setID(id);\r\n        try {\r\n            Files.writeString(Path.of(\"members/idCounter.txt\"),\"\" + (id+1), StandardOpenOption.WRITE);\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        dh.setFilePath(\"members/members.json\");\r\n        dh.addMemberToList(member);\r\n        dh.writeMembers();\r\n        System.out.println(\"Added member: \" + member.getName());\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Chairman/Chairman.java b/src/Chairman/Chairman.java
--- a/src/Chairman/Chairman.java	(revision aeb09a05614d1751764cc6af3191137129c82245)
+++ b/src/Chairman/Chairman.java	(date 1639172587740)
@@ -35,4 +35,11 @@
         System.out.println("Added member: " + member.getName());
     }
 
+    public String getUsername() {
+        return username;
+    }
+
+    public String getPassword() {
+        return password;
+    }
 }
Index: src/Trainer/Trainer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Trainer;\r\nimport Chairman.*;\r\nimport accounting.*;\r\nimport java.util.ArrayList;\r\nimport java.util.Scanner;\r\n\r\npublic class Trainer {\r\n    Analysis analyse = new Analysis();\r\n    Scanner sc = new Scanner(System.in);\r\n    ArrayList<Competition> competitions = new ArrayList<>();\r\n    DataHandler dh = DataHandler.getInstance();\r\n    String username;\r\n    String password;\r\n    /*\r\n    Trainer (String username, String password) {\r\n            this.username = username;\r\n            this.password = password;\r\n    }*/\r\n\r\n    public void displayCasualTopFive(Discipline discipline, Team team) {\r\n        System.out.println(\"Name:\\t\\t\\tTime:\\t\\t\\tDiscipline: \" + discipline + \"\\tTeam: \" + team);\r\n        analyse.printDailyTopFive(discipline,team);\r\n    }\r\n\r\n    public void createNewCompetition() {\r\n        Discipline discipline;\r\n        int selectOption;\r\n        Team team;\r\n        String name;\r\n        int hours;\r\n        int minutes;\r\n        String time;\r\n        System.out.print(\"Write the competition name: \");\r\n        name = sc.nextLine();\r\n        System.out.println(\"What kind of swimming discipline is the event?\");\r\n        System.out.println(\"1. crawl\");\r\n        System.out.println(\"2. butterfly\");\r\n        System.out.println(\"3. breaststroke\");\r\n        System.out.println(\"4. backstroke\");\r\n        selectOption = sc.nextInt();\r\n        sc.nextLine();\r\n        switch(selectOption) {\r\n            case 1:\r\n                discipline = Discipline.CRAWL;\r\n                break;\r\n            case 2:\r\n                discipline = Discipline.BUTTERFLY;\r\n                break;\r\n            case 3:\r\n                discipline = Discipline.BREASTSTROKE;\r\n                break;\r\n            case 4:\r\n                discipline = Discipline.BACKSTROKE;\r\n                break;\r\n            default:\r\n                discipline = null;\r\n        }\r\n        System.out.println(\"When does the competition start?\");\r\n        System.out.print(\"Insert hour: \");\r\n        hours = sc.nextInt();\r\n        sc.nextLine();\r\n        System.out.print(\"Insert minute: \");\r\n        minutes = sc.nextInt();\r\n        sc.nextLine();\r\n        time = String.format(\"%02d:%02d\", hours, minutes);\r\n        System.out.println(\"Where is the competition held?\");\r\n        String place = sc.nextLine();\r\n        System.out.println(\"Is it a junior or senior event? Insert \\\"1\\\" for junior or \\\"2\\\" for senior: \");\r\n        selectOption = sc.nextInt();\r\n        sc.nextLine();\r\n        if (selectOption == 1) {\r\n            team = Team.JUNIOR;\r\n        } else {\r\n            team = Team.SENIOR;\r\n        }\r\n        competitions.add(new Competition(name,discipline,time,place,team,addCompetitors(team, discipline)));\r\n    }\r\n\r\n    public ArrayList<Performance> addCompetitors(Team team, Discipline discipline) {\r\n        System.out.println(\"Would you like to add all competitors from the top five list now? (y/n)\");\r\n        System.out.println(\"To pick them one by one, add them later.\");\r\n        String selectOption = sc.nextLine();\r\n        if(selectOption.equalsIgnoreCase(\"n\")) {\r\n            return new ArrayList<>();\r\n        } else {\r\n            System.out.println(\"Competitors: \");\r\n            System.out.println(\"Name:\\t\\t\\tAge:\");\r\n            analyse.printDailyTopFive(discipline, team);\r\n            return analyse.getDailyTopFive(discipline,team);\r\n        }\r\n    }\r\n\r\n    /*public void addCompetitiorsToCompetition() {\r\n        System.out.println(\"To which competition would you like to add competitors?\");\r\n        for ( int i = 0; i < competitions.size(); i++) {\r\n            System.out.println((i + 1)+ \". \" + competitions.get(i).getName());\r\n        }\r\n        int selectOption = sc.nextInt();\r\n        sc.nextLine();\r\n        Discipline discipline = competitions.get(selectOption - 1).getDiscipline();\r\n        Team team = competitions.get(selectOption - 1).getTeam();\r\n        competitions.get(selectOption - 1).addCompetitors(analyse.getDailyTopFive(discipline,team));\r\n        System.out.println(\"added\");\r\n    }*/\r\n\r\n    public boolean getCompetitionList(){\r\n        boolean trueOrFalse;\r\n        if (competitions.size() == 0) {\r\n            System.out.println(\"No competitions registered\");\r\n            trueOrFalse = false;\r\n        } else {\r\n            trueOrFalse = true;\r\n            System.out.println(\"Competitions registered:\");\r\n            for (int i = 0; i < competitions.size(); i++) {\r\n                System.out.println((i + 1) + \". \" + competitions.get(i).getName());\r\n            }\r\n        }\r\n        return trueOrFalse;\r\n    }\r\n\r\n    public void logDailyPerformance() {\r\n        dh.initMemberJson();\r\n        if (!dh.getMemberList().isEmpty()) {\r\n            Discipline discipline;\r\n            System.out.println(\"Members available for logging: \");\r\n            for (int i = 0; i < dh.getMemberList().size(); i++) {\r\n                System.out.println((i + 1) + \". \" + dh.getMemberList().get(i).getName());\r\n            }\r\n            System.out.println(\"To select a member, insert the corresponding value\");\r\n            int memberSelect = sc.nextInt();\r\n            sc.nextLine();\r\n            System.out.println(dh.getMemberList().get(memberSelect - 1).getName() + \" selected.\");\r\n            System.out.println(\"Insert time for logging\");\r\n            System.out.println(\"minutes: \");\r\n            int minutes = sc.nextInt();\r\n            sc.nextLine();\r\n            System.out.println(\"seconds: \");\r\n            int seconds = sc.nextInt();\r\n            sc.nextLine();\r\n            System.out.println(\"milliseconds: \");\r\n            int milliseconds = sc.nextInt();\r\n            sc.nextLine();\r\n            System.out.println(\"Insert discipline\");\r\n            System.out.println(\"1. crawl\");\r\n            System.out.println(\"2. butterfly\");\r\n            System.out.println(\"3. breaststroke\");\r\n            System.out.println(\"4. backstroke\");\r\n            int selectOption = sc.nextInt();\r\n            sc.nextLine();\r\n            switch ((selectOption)) {\r\n                case 1:\r\n                    discipline = Discipline.CRAWL;\r\n                    break;\r\n                case 2:\r\n                    discipline = Discipline.BUTTERFLY;\r\n                    break;\r\n                case 3:\r\n                    discipline = Discipline.BREASTSTROKE;\r\n                    break;\r\n                case 4:\r\n                    discipline = Discipline.BACKSTROKE;\r\n                    break;\r\n                default:\r\n                    discipline = null;\r\n            }\r\n            analyse.setDailyTopFive(new Performance(dh.getMemberList().get(memberSelect - 1).getName(), dh.getMemberList().get(memberSelect - 1).getAge(), minutes, seconds, milliseconds, dh.getMemberList().get(memberSelect - 1).getID()),discipline, dh.getMemberList().get(memberSelect - 1).getTeam());\r\n        } else {\r\n            System.out.println(\"No members for logging\");\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Trainer/Trainer.java b/src/Trainer/Trainer.java
--- a/src/Trainer/Trainer.java	(revision aeb09a05614d1751764cc6af3191137129c82245)
+++ b/src/Trainer/Trainer.java	(date 1639173148495)
@@ -5,19 +5,19 @@
 import java.util.Scanner;
 
 public class Trainer {
-    Analysis analyse = new Analysis();
-    Scanner sc = new Scanner(System.in);
-    ArrayList<Competition> competitions = new ArrayList<>();
-    DataHandler dh = DataHandler.getInstance();
-    String username;
-    String password;
+    private Analysis analyse = new Analysis();
+    private Scanner sc = new Scanner(System.in);
+    private ArrayList<Competition> competitions = new ArrayList<>();
+    private DataHandler dh = DataHandler.getInstance();
+    private final String username = "gucci";
+    private final String password = "prada";
     /*
     Trainer (String username, String password) {
             this.username = username;
             this.password = password;
     }*/
 
-    public void displayCasualTopFive(Discipline discipline, Team team) {
+    public void displayDailyTopFive(Discipline discipline, Team team) {
         System.out.println("Name:\t\t\tTime:\t\t\tDiscipline: " + discipline + "\tTeam: " + team);
         analyse.printDailyTopFive(discipline,team);
     }
@@ -76,6 +76,14 @@
         competitions.add(new Competition(name,discipline,time,place,team,addCompetitors(team, discipline)));
     }
 
+    public ArrayList<Competition> getCompetitions() {
+        return competitions;
+    }
+
+    public Analysis getAnalyse() {
+        return analyse;
+    }
+
     public ArrayList<Performance> addCompetitors(Team team, Discipline discipline) {
         System.out.println("Would you like to add all competitors from the top five list now? (y/n)");
         System.out.println("To pick them one by one, add them later.");
@@ -168,4 +176,11 @@
             System.out.println("No members for logging");
         }
     }
+    public String getUsername() {
+        return username;
+    }
+
+    public String getPassword() {
+        return password;
+    }
 }
Index: src/ui/Menu.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ui;\r\n\r\nimport Chairman.*;\r\n//import Trainer.Trainer;\r\nimport accounting.Accountant;\r\n\r\nimport java.util.Scanner;\r\n\r\nclass Application{\r\n\r\n    static Scanner scan = new Scanner(System.in);\r\n\r\n    Chairman ch = new Chairman();\r\n    Accountant ac = new Accountant();\r\n    //Trainer tr = new Trainer();\r\n\r\n    public boolean doesStringRepresentInt(String string) {\r\n\r\n        if(string == null) {\r\n            return false;\r\n        }\r\n\r\n        int length = string.length();\r\n        if(length == 0) {\r\n            return false;\r\n        }\r\n\r\n        for (int i = 0; i < length; i++) {\r\n            char c = string.charAt(i);\r\n            if (c < '0' || c > '9') {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public int chooseFromOptions(int numberOfAvailableOptions) {\r\n\r\n        while(true) {\r\n            String choiceAsString = scan.nextLine();\r\n            boolean isInt = doesStringRepresentInt(choiceAsString);\r\n\r\n            while (isInt) {\r\n                int choiceAsInt = Integer.parseInt(choiceAsString);\r\n                if (choiceAsInt < 1 || choiceAsInt > numberOfAvailableOptions) {\r\n                    System.out.println(\"Invalid input\");\r\n                    choiceAsString = scan.nextLine();\r\n                    isInt = doesStringRepresentInt(choiceAsString);\r\n                } else {\r\n                    for (int i = 1; i <= numberOfAvailableOptions; i++) {\r\n                        if (choiceAsInt == i) {\r\n                            return choiceAsInt;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (!isInt) {\r\n                System.out.println(\"Invalid input\");\r\n            }\r\n        }\r\n    }\r\n\r\n    public void login(int oneTwoOrThree) {\r\n\r\n        String username = \"\";\r\n        String password = \"\";\r\n        boolean wrongLogin = true;\r\n\r\n            while(wrongLogin) {\r\n                System.out.print(\"Username: \");\r\n                String usernameInput = scan.nextLine();\r\n                System.out.print(\"Password: \");\r\n                String passwordInput = scan.nextLine();\r\n\r\n                switch (oneTwoOrThree) {\r\n                    case 1:\r\n                        username = ch.getUsername();\r\n                        password = ch.getPassword();\r\n                        break;\r\n                    case 2:\r\n                        username = ac.getUsername();\r\n                        password = ac.getPassword();\r\n                        break;\r\n                    case 3:\r\n                        //username = tr.getUsername();\r\n                        //password = tr.getPassword();\r\n                        break;\r\n                }\r\n\r\n                if(usernameInput.equals(username) && passwordInput.equals(password)) {\r\n                    wrongLogin = false;\r\n                    switch (oneTwoOrThree) {\r\n                        case 1 -> chairmanMenu();\r\n                        case 2 -> accountantMenu();\r\n                        case 3 -> trainerMenu();\r\n                    }\r\n                } else {\r\n                    System.out.println(\"Invalid input\\n\");\r\n                }\r\n            }\r\n    }\r\n\r\n    public void chairmanMenu() {\r\n        System.out.println(\"\\nThis is the Chairman's menu\");\r\n        displayChairmanMenu();\r\n        int choiceOfOption = chooseFromOptions(2);\r\n\r\n        if (choiceOfOption == 1) {\r\n            Member member = new Member(scan.nextInt(), scan.nextLine(), scan.nextLine(), scan.nextLine(), TypeOfSwimmer.CASUAL, Team.JUNIOR);\r\n            ch.createNewMember(member);\r\n            ac.initiateCreateSubscription(member);\r\n        } else if (choiceOfOption == 2) {\r\n            run();\r\n        }\r\n    }\r\n    public void accountantMenu() {\r\n        System.out.println(\"\\nThis is the Accountant's menu\");\r\n        displayAccountantMenu();\r\n        int choiceOfOption = chooseFromOptions(5);\r\n\r\n        switch (choiceOfOption) {\r\n            case 1 -> System.out.println(\"Code for adding member to non-paying list\");\r\n            case 2 -> System.out.println(\"Code for adding member to paying list\");\r\n            case 3 -> ac.InitiateChangeMembershipToPassive(); //System.out.println(\"Code for changing subscription of member to passive\");\r\n            case 4 -> ac.initiateGetProjectedYearlyRevenue();\r\n            case 5 -> run();\r\n        }\r\n    }\r\n    public void trainerMenu() {\r\n        System.out.println(\"\\nThis is the Trainer's menu\");\r\n        displayTrainerMenu();\r\n        int choiceOfOption = chooseFromOptions(4);\r\n\r\n        switch (choiceOfOption) {\r\n            case 1 -> System.out.println(\"Code for ?\");\r\n            case 2 -> System.out.println(\"Code for ?\");\r\n            case 3 -> System.out.println(\"Code for ?\");\r\n            case 4 -> run();\r\n        }\r\n    }\r\n\r\n    public void displayChairmanMenu() {\r\n        System.out.println(\"Choose from the following two options\");\r\n        System.out.println(\"Press 1: Create new member\");\r\n        System.out.println(\"Press 2: Log out\");\r\n    }\r\n    public void displayAccountantMenu() {\r\n        System.out.println(\"Choose from the following four options\");\r\n        System.out.println(\"Press 1: Add member to non-paying members list\");\r\n        System.out.println(\"Press 2: Add member to paying members list\");\r\n        System.out.println(\"Press 3: Change subscription of member to passive\");\r\n        System.out.println(\"Press 4: Show projected yearly revenue\");\r\n        System.out.println(\"Press 5: Log out\");\r\n    }\r\n    public void displayTrainerMenu() {\r\n        System.out.println(\"Choose from the following five options\");\r\n        System.out.println(\"Press 1: Create competition\");\r\n        System.out.println(\"Press 2: Competition list\");\r\n        System.out.println(\"Press 3: Log daily performance\");\r\n        System.out.println(\"Press 4: See daily top five\");\r\n        System.out.println(\"Press 5: Log out\");\r\n    }\r\n\r\n    public void run() {\r\n        //ac.InitiateMembershipSweep();\r\n\r\n        System.out.println(\"\\nChoose from the following three privileges\");\r\n        System.out.println(\"Press 1: Chairman\");\r\n        System.out.println(\"Press 2: Accountant\");\r\n        System.out.println(\"Press 3: Trainer\");\r\n        System.out.println(\"Press 4: Quit\");\r\n\r\n        int choiceOfPrivilege = chooseFromOptions(4);\r\n\r\n        switch (choiceOfPrivilege) {\r\n            case 1 -> login(1);\r\n            case 2 -> login(2);\r\n            case 3 -> login(3);\r\n            case 4 -> System.out.println();\r\n        }\r\n    }\r\n}\r\n\r\npublic class Menu {\r\n    public static void main(String[] args) {\r\n        new Application().run();\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/ui/Menu.java b/src/ui/Menu.java
--- a/src/ui/Menu.java	(revision aeb09a05614d1751764cc6af3191137129c82245)
+++ b/src/ui/Menu.java	(date 1639173148480)
@@ -1,18 +1,18 @@
 package ui;
 
 import Chairman.*;
-//import Trainer.Trainer;
+import Trainer.*;
 import accounting.Accountant;
 
 import java.util.Scanner;
 
-class Application{
+class  Application{
 
     static Scanner scan = new Scanner(System.in);
 
     Chairman ch = new Chairman();
     Accountant ac = new Accountant();
-    //Trainer tr = new Trainer();
+    Trainer tr = new Trainer();
 
     public boolean doesStringRepresentInt(String string) {
 
@@ -71,7 +71,6 @@
                 String usernameInput = scan.nextLine();
                 System.out.print("Password: ");
                 String passwordInput = scan.nextLine();
-
                 switch (oneTwoOrThree) {
                     case 1:
                         username = ch.getUsername();
@@ -82,8 +81,8 @@
                         password = ac.getPassword();
                         break;
                     case 3:
-                        //username = tr.getUsername();
-                        //password = tr.getPassword();
+                        username = tr.getUsername();
+                        password = tr.getPassword();
                         break;
                 }
 
@@ -126,16 +125,19 @@
             case 5 -> run();
         }
     }
+
+
     public void trainerMenu() {
         System.out.println("\nThis is the Trainer's menu");
         displayTrainerMenu();
-        int choiceOfOption = chooseFromOptions(4);
+        int choiceOfOption = chooseFromOptions(5);
 
         switch (choiceOfOption) {
-            case 1 -> System.out.println("Code for ?");
-            case 2 -> System.out.println("Code for ?");
-            case 3 -> System.out.println("Code for ?");
-            case 4 -> run();
+            case 1 -> tr.createNewCompetition();
+            case 2 -> competitionListMenu();
+            case 3 -> tr.logDailyPerformance();
+            case 4 -> displayDailyTopFiveMenu();
+            case 5 -> run();
         }
     }
 
@@ -154,13 +156,172 @@
     }
     public void displayTrainerMenu() {
         System.out.println("Choose from the following five options");
-        System.out.println("Press 1: Create competition");
+        System.out.println("Press 1: Create new competition");
         System.out.println("Press 2: Competition list");
         System.out.println("Press 3: Log daily performance");
-        System.out.println("Press 4: See daily top five");
+        System.out.println("Press 4: Display daily top five");
         System.out.println("Press 5: Log out");
     }
 
+    public void competitionListMenu() {
+        System.out.println("Select a competition to preview or edit");
+        if (tr.getCompetitionList()) {
+            int selectOption = chooseFromOptions(11);
+            competitionSelectedMenu(selectOption);
+        }
+    }
+
+    public void competitionSelectedMenu(int option) {
+        boolean run2 = true;
+        boolean run;
+        do {
+            try {
+                System.out.println(tr.getCompetitions().get(option - 1).getName() + " selected");
+                System.out.println("1. print competition details");
+                System.out.println("2. log performance");
+                System.out.println("3. print top five");
+                System.out.println("4. add competitors");
+                System.out.println("5. remove competitor");
+                System.out.println("6. edit time of event");
+                System.out.println("7. edit place of event");
+                System.out.println("8. edit discipline");
+                System.out.println("9. edit team");
+                System.out.println("10. delete competition");
+                System.out.println("11. return to menu");
+                int selectOption = scan.nextInt();
+                scan.nextLine();
+                switch(selectOption) {
+                    case 1:
+                        tr.getCompetitions().get(option - 1).printCompetitionDetails();
+                        break;
+                    case 2:
+                        if (tr.getCompetitions().get(option - 1).getMemberList().isEmpty()) {
+                            System.out.println("No competitors registered in the competition");
+                        } else {
+                            tr.getCompetitions().get(option - 1).logPerformance();
+                        }
+                        break;
+                    case 3:
+                        tr.getCompetitions().get(option - 1).printTopFiveList();
+                        break;
+                    case 4:
+                        Discipline discipline = tr.getCompetitions().get(option - 1).getDiscipline();
+                        Team team = tr.getCompetitions().get(option - 1).getTeam();
+                        tr.getCompetitions().get(option - 1).addCompetitors(tr.getAnalyse().getDailyTopFive(discipline, team));
+                        break;
+                    case 5:
+                        tr.getCompetitions().get(option - 1).removeCompetitor();
+                        break;
+                    case 6:
+                        int hour = scan.nextInt();
+                        scan.nextLine();
+                        int minute = scan.nextInt();
+                        scan.nextLine();
+                        tr.getCompetitions().get(option - 1).setTime(hour, minute);
+                        break;
+                    case 7:
+                        String place = scan.nextLine();
+                        tr.getCompetitions().get(option - 1).setPlace(place);
+                        break;
+                    case 8:
+                        do {
+                            run = false;
+                            System.out.println("Current discipline is" + tr.getCompetitions().get(option - 1).getDiscipline());
+                            int disciplineSelect = scan.nextInt();
+                            scan.nextLine();
+                            switch (disciplineSelect) {
+                                case 1:
+                                    tr.getCompetitions().get(option - 1).setDiscipline(Discipline.CRAWL);
+                                    break;
+                                case 2:
+                                    tr.getCompetitions().get(option - 1).setDiscipline(Discipline.BUTTERFLY);
+                                    break;
+                                case 3:
+                                    tr.getCompetitions().get(option - 1).setDiscipline(Discipline.BREASTSTROKE);
+                                    break;
+                                case 4:
+                                    tr.getCompetitions().get(option - 1).setDiscipline(Discipline.BACKSTROKE);
+                                    break;
+                                default:
+                                    System.out.println("Illegal value. Try again");
+                                    run = true;
+                            }
+                        } while (run);
+                        break;
+                    case 9:
+                        do {
+                            run = false;
+                            System.out.println("Current team is " + tr.getCompetitions().get(option - 1).getTeam());
+                            System.out.println("Select team");
+                            System.out.println("1. junior");
+                            System.out.println("2. senior");
+                            try {
+                                int teamSelect = scan.nextInt();
+                                scan.nextLine();
+                                if (teamSelect == 1) {
+                                    tr.getCompetitions().get(option - 1).setTeam(Team.JUNIOR);
+                                } else if (teamSelect == 2) {
+                                    tr.getCompetitions().get(option - 1).setTeam(Team.SENIOR);
+                                } else {
+                                    System.out.println("Illegal value. Try again");
+                                    run = true;
+                                }
+                            } catch (Exception e) {
+                                System.out.println("Illegal value. Try again");
+                                run = true;
+                            }
+                        } while(run);
+                        break;
+                    case 10:
+                        tr.getCompetitions().remove(option - 1);
+                        run2 = false;
+                    case 11:
+                        run2 = false;
+                }
+            } catch (Exception e) {
+                System.out.println("Illegal value! Try again.");
+            }
+        } while (run2);
+    }
+
+
+    public void displayDailyTopFiveMenu() {
+
+        Discipline discipline = null;
+
+        System.out.println("Display daily top five in the following disciplines");
+        System.out.println("Press 1: Crawl");
+        System.out.println("Press 2: Butterfly");
+        System.out.println("Press 3: Breaststroke");
+        System.out.println("Press 4: Backstroke");
+        int choiceOfPrivilege = chooseFromOptions(4);
+        switch(choiceOfPrivilege) {
+            case 1 -> discipline = Discipline.CRAWL;
+            case 2 -> discipline = Discipline.BUTTERFLY;
+            case 3 -> discipline = Discipline.BREASTSTROKE;
+            case 4 -> discipline = Discipline.BACKSTROKE;
+        }
+        tr.displayDailyTopFive(discipline, juniorOrSenior());
+    }
+
+    private Team juniorOrSenior() {
+
+        Team team = null;
+
+        System.out.println("Press 1: Junior");
+        System.out.println("Press 2: Senior");
+        int selectOption = chooseFromOptions(2);
+        if (selectOption == 1) {
+            team = Team.JUNIOR;
+        } else if (selectOption == 2) {
+            team = Team.SENIOR;
+        }
+
+        return team;
+    }
+
+
+
     public void run() {
         //ac.InitiateMembershipSweep();
 
@@ -181,7 +342,7 @@
     }
 }
 
-public class Menu {
+public class  Menu {
     public static void main(String[] args) {
         new Application().run();
     }
